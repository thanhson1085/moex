<?php

namespace Moex\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MeOrdersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MeOrdersRepository extends EntityRepository
{
	public function findOneUserById($user_id){
		$user_logins = $this->getEntityManager()
			->createQuery('SELECT u.userLogin FROM MoexCoreBundle:MeUsers u WHERE u.id = '.$user_id)
			->getResult();
		return (empty($user_logins))?'':$user_logins[0]['userLogin'];
	}

    public function findByFilterQuery(\Moex\CoreBundle\Entity\OrderFilter $filter)
    {
        $query = $this->createQueryBuilder('o')
							  ->select('o.id, o.phone, o.orderFrom, o.orderTo, o.orderStatus, o.price, u.userLogin, o.orderTime')
                              ->where('1 = 1');

        $query = $query->leftJoin('o.user', 'u');
        $query = $query->groupBy('o.id');

        if ($filter->getPhone() != null) {
            $query = $query->andWhere('o.phone LIKE :phone')
                            ->setParameter('phone', "%".$filter->getPhone()."%");
        }

        if ($filter->getOrderFrom() != null) {
            $query = $query->andWhere('o.orderFrom LIKE :orderfrom')
                            ->setParameter('orderfrom', "%".$filter->getOrderFrom()."%");
        }

        if ($filter->getOrderTo() != null) {
            $query = $query->andWhere('o.orderTo LIKE :orderto')
                            ->setParameter('orderto', "%".$filter->getOrderTo()."%");
        }

        if ($filter->getOrderName() != null) {
            $query = $query->andWhere('o.orderName LIKE :ordername')
                            ->setParameter('ordername', "%".$filter->getOrderName()."%");
        }

        if ($filter->getOrderInfo() != null) {
            $query = $query->andWhere('o.orderInfo LIKE :orderinfo')
                            ->setParameter('orderinfo', $filter->getOrderInfo()."%");
        }

        if ($filter->getOrderTimeFrom() != null) {
			$datetime = $filter->getOrderTimeFrom();
            $query = $query->andWhere('o.orderTime >= :datetime')
                            ->setParameter('datetime', $datetime);
        }
        if ($filter->getOrderTimeTo() != null) {
			$datetime = $filter->getOrderTimeTo();
            $query = $query->andWhere('o.orderTime <= :datetime')
                            ->setParameter('datetime', $datetime);
        }
/*
        if ($filter->getOrderTimeFrom() != null) {
			$datetime = $filter->getOrderTimeFrom();
			$year = $datetime->format('y');	
			$month = $datetime->format('m');	
			$day = $datetime->format('d');	
            $query = $query->andWhere('YEAR(o.orderTime) >= :year')
            				->andWhere('MONTH(o.orderTime) >= :month')
            				->andWhere('DAY(o.orderTime) >= :day')
                            ->setParameter('year', $year)
                            ->setParameter('month', $month)
                            ->setParameter('day', $day);
        }

        if ($filter->getOrderTimeTo() != null) {
			$datetime = $filter->getOrderTimeTo();
			$year = $datetime->format('y');	
			$month = $datetime->format('m');	
			$day = $datetime->format('d');	
            $query = $query->andWhere('YEAR(o.orderTime) <= :year')
            				->andWhere('MONTH(o.orderTime) <= :month')
            				->andWhere('DAY(o.orderTime) <= :day')
                            ->setParameter('year', $year)
                            ->setParameter('month', $month)
                            ->setParameter('day', $day);
        }
*/
		/*
        if ($filter->getGroup() != null) {
            $group = $filter->getGroup();
            $query = $query->innerJoin('u.groups', 'g')
                            ->andWhere('g.id=:group')
                            ->setParameter('group', $group->getId());
        }
		*/
		$query = $query->orderBy('o.id', 'DESC');

        return $query->getQuery();
    }
}
